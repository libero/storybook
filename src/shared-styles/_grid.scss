@use "logical";
@use "media-query";
@use "size";
@use "space";

$column-gap: 1.6% !default;
$divider-size: 1px !default;
$edge-space-medium: 7vw !default;
$edge-space-wide: 14vw !default;
$main-column-count: 12 !default;
$max-inline-size: 1114px !default;
$min-inline-size: 320px !default;

@function get-overall-inline-size($columns) {
  @return calc((#{$columns} * var(--GRID-COLUMN-INLINE-SIZE)) + (#{$columns - 1} * var(--GRID-COLUMN-GAP)));
}

@mixin base($max-inline-size) {
  @include size.max-inline-size($max-inline-size);
  @include space.block($end: 0);
  @include space.margin(auto, inline);
  @include space.padding($column-gap, inline);
  box-sizing: content-box;

  @supports (display: grid) and (--custom: property) {
    display: grid;
    @include size.max-inline-size(unset);
    @include space.margin(unset, inline);
    @include space.padding(unset, inline);
    box-sizing: border-box;
  }
}

:root {
  --GRID-COLUMN-GAP: #{$column-gap};
  --GRID-EDGE-SPACE: #{$edge-space-medium};
  --GRID-COLUMN-INLINE-SIZE: calc((100% - (var(--GRID-EDGE-SPACE) * 2) - (var(--GRID-COLUMN-GAP) * #{$main-column-count - 1})) / #{$main-column-count});

  @include media-query.mq($from: medium) {
    --GRID-EDGE-SPACE: #{$edge-space-wide};
  }

  @include media-query.mq($from: extra-wide) {
    --GRID-COLUMN-GAP: #{($max-inline-size * $column-gap) / 100%};
    --GRID-COLUMN-INLINE-SIZE: calc((#{$max-inline-size} - (var(--GRID-COLUMN-GAP) * #{$main-column-count - 1})) / #{$main-column-count});
  }

  @include logical.property(min, inline-size, $min-inline-size, $to-rem: false);
}
