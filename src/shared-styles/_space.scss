@use "baseline";
@use "error";
@use "logical";
@use "media-query";
@use "rem";
@use "size";
@use "validate";

// Fallbacks for CSS logical properties contained within this mixin require the following treatment of HTML dir attributes:
//  - document level: always specified, via the HTML element
//  - block level: specified on every element within a block describing a direction switch.
//
// For example:
// <html lang="..." dir="ltr">
// ...
// <div>
//   Doesn't need a dir attribute. Most cases will be like this.
// </div>
//
//<div class="test" dir="rtl">
//
//  This block changes the text direction. Every descendant element must have its own dir attribute....
//
//  <div class="test" dir="rtl">... even if the direction doesn't change.</div>
//
//  <div class="test" dir="ltr">But obviously also when it does.</div>
//
//</div>
@mixin _spacing($sizes, $space-type, $dimension: "") {

  @if $dimension == "" {

    @include validate.expect-at-most($sizes, 4, "More than four sizes supplied when no dimension") {
      @include logical.property($space-type, all, $sizes);
    }

  } @else if $dimension == inline {

    @include validate.expect-at-most($sizes, 2, "More than two sizes supplied with 'inline' dimension") {
      @include logical.property($space-type, $dimension, $sizes);
    }

  } @else if $dimension == inline-start {

    @include validate.expect-single-value($sizes, "More than one size supplied with 'inline-start' dimension") {
      @include logical.property($space-type, $dimension, $sizes);
    }

  } @else if $dimension == inline-end {

    @include validate.expect-single-value($sizes, "More than one size supplied with 'inline-end' dimension") {
      @include logical.property($space-type, $dimension, $sizes);
    }

  } @else if $dimension == block {

    @include validate.expect-at-most($sizes, 2, "More than two sizes supplied with 'block' dimension") {
      @include logical.property($space-type, $dimension, $sizes);
    }

  } @else if $dimension == block-start {

    @include validate.expect-single-value($sizes, "More than one size supplied with 'block-start' dimension") {
      @include logical.property($space-type, $dimension, $sizes);
    }

  } @else if $dimension == block-end {

    @include validate.expect-single-value($sizes, "More than one size supplied with 'block-end' dimension") {
      @include logical.property($space-type, $dimension, $sizes);
    }

  } @else if index((top, bottom, left, right), $dimension) {
    @include error.throw("'#{$dimension}' is a physical dimension, use its logical equivilant");
  } @else {
    @include error.throw("Unknown dimension '#{$dimension}'");
  }

}

@mixin padding($sizes, $dimension: "") {
  @include _spacing($sizes, padding, $dimension);
}

@mixin margin($sizes, $dimension: "") {
  @include _spacing($sizes, margin, $dimension);
}

@mixin none($dimension: "") {
  @include margin(0, $dimension);
  @include padding(0, $dimension);
}

@mixin block($start: 0, $end: baseline.for-units(4)) {
  @include margin($start $end, block);
}
